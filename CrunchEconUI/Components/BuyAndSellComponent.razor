@using CrunchEconModels.Models
@using CrunchEconModels.Models.Events;
@using CrunchEconUI.Models
@inject DialogService DialogService
@using CrunchEconUI.Services
@using Newtonsoft.Json;
@using Radzen
@using Radzen.Blazor
@using System.Text;

<div>
    @*     <RadzenCard> *@
    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H4">Amount</RadzenText>
    <NumericPicker @bind-Value="@Amount" Min="0" Max=@Int32.MaxValue> </NumericPicker>
    <div class="rz-p-6 rz-text-align-center">
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="Radzen.FlexWrap.Wrap">

            <RadzenButton Text="Buy" ButtonStyle="ButtonStyle.Secondary" Click=@ClickBuy Disabled=@(!ListedItem.IsSelling) />

            <RadzenButton Text="Sell" ButtonStyle="ButtonStyle.Primary" Click=@ClickSell Disabled=@(!ListedItem.IsBuying) />

            <RadzenButton Text="Withdraw" ButtonStyle="ButtonStyle.Success" Icon="account_balance_wallet" Click="@ClickWithdraw" Disabled=@(ListedItem.OwnerId != User.SteamId)></RadzenButton>
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@ClickDelete" Disabled=@(ListedItem.OwnerId != User.SteamId)></RadzenButton>

        </RadzenStack>
    </div>
    @*     </RadzenCard> *@
</div>

@code {
    [Parameter]
    public UserInfo? User { get; set; }
    public int Amount { get; set; }
    [Parameter]
    public ItemListing ListedItem { get; set; }
    [Inject]
    IListingsService listingService { get; set; }

    [Inject]
    public PlayerBalanceAndNotifyService BalanceService { get; set; }
    [Inject]
    public EventService eventService { get; set; }

    public async Task OpenOrder()
    {
    }

    public async Task<bool> IsSuspended()
    {
        return await listingService.IsSuspended(ListedItem.Id);
    }

    public async Task ClickWithdraw()
    {
        ListedItem = await listingService.GetUpdatedItem(ListedItem.Id);
        var susp = await IsSuspended();
        if (susp || ListedItem.Deleted)
        {
            await DialogService.Alert($"Selected item is currently suspended, try again later.", "Error");
            return;
        }
        listingService.ModifySuspended(ListedItem, true);

        if (Amount > ListedItem.Amount)
        {
            Amount = ListedItem.Amount;
        }

        var confirmed = await DialogService.Confirm($"Withdrawing {Amount:n0} of {ListedItem.ItemId.Replace("MyObjectBuilder_", "")}", "Confirmation", new ConfirmOptions() { OkButtonText = $"Withdraw", CancelButtonText = "Cancel" });
        if (confirmed != null && confirmed.Value)
        {
            var buy = new BuyItemEvent();
            buy.ListedItemId = ListedItem.Id;
            buy.SellerSteamId = ListedItem.OwnerId;
            buy.Price = 0;
            buy.Amount = Amount;
            buy.BuyerSteamId = User.SteamId;
            buy.DefinitionIdString = $"{ListedItem.ItemId}";
            buy.OriginatingPlayerSteamId = User.SteamId;
            buy.RaisedAt = DateTime.Now;
            buy.IsAdminSale = true;

            var final = new Event();

            final.EventType = EventType.BuyItem;
            final.JsonEvent = JsonConvert.SerializeObject(buy);

            eventService.AddEvent(User.SteamId, final);
        }
        else
        {
            listingService.ModifySuspended(ListedItem, false);

        }
    }

    public async Task ClickDelete()
    {
        ListedItem = await listingService.GetUpdatedItem(ListedItem.Id);
        var susp = await IsSuspended();
        if (susp || ListedItem.Deleted)
        {
            await DialogService.Alert($"Selected item is currently suspended, try again later.", "Error");
            return;
        }
        listingService.ModifySuspended(ListedItem, true);
        var refundMessage = new StringBuilder();
        if (ListedItem.IsBuying && ListedItem.MaxAmountToBuy > 0)
        {
            refundMessage.AppendLine($"Total Refund for listing {ListedItem.MaxAmountToBuy:n0} of {ListedItem.ItemId.Replace("MyObjectBuilder_", "")} <br><p class=\"PriceGreen\">{(ListedItem.MaxAmountToBuy * ListedItem.SellPricePerItem):n0} SC</ p > <br>");
        }
        if (ListedItem.IsSelling && ListedItem.Amount > 0)
        {
            refundMessage.AppendLine($"Item Refund for listing {ListedItem.Amount:n0} of {ListedItem.ItemId.Replace("MyObjectBuilder_", "")} <br>");
        }
        var confirmed = await DialogService.Confirm(refundMessage.ToString(), "Confirmation", new ConfirmOptions() { OkButtonText = $"Delete Listing", CancelButtonText = "Cancel" });
        if (confirmed != null && confirmed.Value)
        {
            var final = new Event();
            var del = new DeleteListingEvent();
            del.Listing = ListedItem;
            del.OriginatingPlayerSteamId = ListedItem.OwnerId;
            final.EventType = EventType.DeleteListing;
            final.JsonEvent = JsonConvert.SerializeObject(del);
            eventService.AddEvent(User.SteamId, final);
        }
        else
        {
            listingService.ModifySuspended(ListedItem, false);
        }
    }

    public async Task ClickSell()
    {
        ListedItem = await listingService.GetUpdatedItem(ListedItem.Id);
        var susp = await IsSuspended();
        if (susp || ListedItem.Deleted)
        {
            await DialogService.Alert($"Selected item is currently suspended, try again later.", "Error");
            return;
        }
        listingService.ModifySuspended(ListedItem, true);

        var buyableAmount = ListedItem.MaxAmountToBuy;
        if (buyableAmount < Amount)
        {
            Amount = buyableAmount;
        }

        var confirmed = await DialogService.Confirm($"Total Price for {Amount:n0} of {ListedItem.ItemId.Replace("MyObjectBuilder_", "")} < br >< p class=\"PriceGreen\">{(Amount * ListedItem.SellPricePerItem):n0} SC</ p >", "Confirmation", new ConfirmOptions() { OkButtonText = $"Sell", CancelButtonText = "Cancel" });
        if (confirmed != null && confirmed.Value)
        {
            var buy = new BuyItemEvent();
            buy.ListedItemId = ListedItem.Id;
            buy.SellerSteamId = ListedItem.OwnerId;
            buy.Price = Amount * ListedItem.SellPricePerItem;
            buy.Amount = Amount;
            buy.BuyerSteamId = User.SteamId;
            buy.DefinitionIdString = $"{ListedItem.ItemId}";
            buy.OriginatingPlayerSteamId = User.SteamId;
            buy.RaisedAt = DateTime.Now;
            buy.IsAdminSale = true;

            var final = new Event();

            final.EventType = EventType.SellItem;
            final.JsonEvent = JsonConvert.SerializeObject(buy);

            eventService.AddEvent(User.SteamId, final);


        }
        else
        {
            listingService.ModifySuspended(ListedItem, false);

        }
        return;
    }

    public async Task ClickBuy()
    {
        ListedItem = await listingService.GetUpdatedItem(ListedItem.Id);
        var susp = await IsSuspended();
        if (susp || ListedItem.Deleted)
        {
            await DialogService.Alert($"Selected item is currently suspended, try again later.", "Error");
            return;
        }
        listingService.ModifySuspended(ListedItem, true);

        if (Amount > ListedItem.Amount)
        {
            Amount = ListedItem.Amount;
        }
        var balance = BalanceService.GetBalance(User.SteamId);
        if (balance < Amount * ListedItem.BuyPricePerItem)
        {
            await DialogService.Alert($"You cannot afford this! Last known balance is <p class=\"PriceRed\">{balance} SC</p>", "Error");
            return;
        }
        var confirmed = await DialogService.Confirm($"Total Price for {Amount:n0} of {ListedItem.ItemId.Replace("MyObjectBuilder_", "")} < br > < p class=\"PriceRed\">{(Amount * ListedItem.BuyPricePerItem):n0}SC </ p >", "Confirmation", new ConfirmOptions() { OkButtonText = $"Buy", CancelButtonText = "Cancel" });
        if (confirmed != null && confirmed.Value)
        {
            var buy = new BuyItemEvent();
            buy.ListedItemId = ListedItem.Id;
            buy.SellerSteamId = ListedItem.OwnerId;
            buy.Price = Amount * ListedItem.BuyPricePerItem;
            buy.Amount = Amount;
            buy.BuyerSteamId = User.SteamId;
            buy.DefinitionIdString = $"{ListedItem.ItemId}";
            buy.OriginatingPlayerSteamId = User.SteamId;
            buy.RaisedAt = DateTime.Now;
            buy.IsAdminSale = true;

            var final = new Event();

            final.EventType = EventType.BuyItem;
            final.JsonEvent = JsonConvert.SerializeObject(buy);

            eventService.AddEvent(User.SteamId, final);
        }
        else
        {
            listingService.ModifySuspended(ListedItem, false);

        }


        return;
    }

    protected override async Task OnInitializedAsync()
    {

    }
}
